version: 2.1

orbs:
  cypress: cypress-io/cypress@1.25.1

executors:
  my-executor:
    docker:
      - image: circleci/node:12.13
    working_directory: ~/repo
  cypress-staging:
    docker:
      - image: cypress/base:10
    environment:
      CYPRESS_BASE_URL: http://localhost:3100
      CYPRESS_JWT_SECRET: secret
      JWT_SECRET: secret
      ALLOWED_GROUPS: housing-officer-dev
      NEXT_PUBLIC_API_PATH: /api

jobs:
  test:
    executor: my-executor

    steps:
      - checkout

      - run:
          name: Concatenate all package-lock.json files into single file for checksum
          command: cat package-lock.json > combined-package-lock.txt

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "combined-package-lock.txt" }}

      - run:
          name: Install dependencies
          command: |
            sudo CYPRESS_CACHE_FOLDER=~/repo npm i --no-cache git
            sudo CYPRESS_CACHE_FOLDER=~/repo npm i

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "combined-package-lock.txt" }}

      - run:
          name: Run linter
          command: npm run lint

      - run:
          name: Run prettier
          command: npm run prettier:test

      - run:
          name: Build application
          command: npm run build

      - run:
          name: Run unit tests
          command: npm run test:unit:ci

      - persist_to_workspace:
          root: ~/repo
          paths: .

  deploy-staging:
    executor: my-executor

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Set AWS credentials
          command: |
            pushd ~ && ./repo/node_modules/serverless/bin/serverless.js config credentials -p aws -k ${AWS_ACCESS_KEY_ID} -s ${AWS_SECRET_ACCESS_KEY} -n hackney && popd

      - run:
          name: Deploy application
          command: |
            NODE_ENV=staging NEXT_PUBLIC_API_PATH=$API_PATH_STAGING NEXT_PUBLIC_SINGLEVIEW_URL=$SINGLEVIEW_URL_STAGING npm run build && ./node_modules/serverless/bin/serverless.js deploy -s staging

      - run:
          name: Run integration tests
          command: INTEGRATION_TEST_API_PATH=${API_PATH_STAGING} npm run test:integration

  deploy-production:
    executor: my-executor

    steps:
      - checkout

      - run:
          name: Concatenate all package-lock.json files into single file for checksum
          command: cat package-lock.json > combined-package-lock.txt

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "combined-package-lock.txt" }}

      - run:
          name: Install dependencies
          command: |
            sudo CYPRESS_CACHE_FOLDER=~/repo npm i --no-cache git
            sudo CYPRESS_CACHE_FOLDER=~/repo npm i

      - run:
          name: Set AWS credentials
          command: |
            pushd ~ && ./repo/node_modules/serverless/bin/serverless.js config credentials -p aws -k ${AWS_ACCESS_KEY_ID} -s ${AWS_SECRET_ACCESS_KEY} -n hackney && popd

      - run:
          name: Deploy application
          command: |
            NODE_ENV=production NEXT_PUBLIC_API_PATH=$API_PATH_PRODUCTION NEXT_PUBLIC_SINGLEVIEW_URL=$SINGLEVIEW_URL_PRODUCTION npm run build && ./node_modules/serverless/bin/serverless.js deploy -s production

      - run:
          name: Run integration tests
          command: INTEGRATION_TEST_API_PATH=${API_PATH_PRODUCTION} npm run test:integration

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - test
      - deploy-staging:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - cypress/run:
          name: cypress-branch
          executor: cypress-staging
          store_artifacts: true
          start: npm run dev
          requires:
            - test
          filters:
            branches:
              ignore:
                - master
      - cypress/run:
          name: cypress-master
          store_artifacts: true
          requires:
            - deploy-staging
          filters:
            branches:
              only:
                - master
      - permit-deploy-production:
          type: approval
          requires:
            - deploy-staging
            - cypress-master
      - deploy-production:
          requires:
            - permit-deploy-production
