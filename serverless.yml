service: mat-service

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  api-name: hn-mat-service-api
  stage: dev
  dbname: matServiceDb
  environment:
    DB_USER: ${ssm:/${self:custom.stage}-mat-service-db-MASTER_USERNAME, env:DB_USER}
    DB_PASSWORD: ${ssm:/${self:custom.stage}-mat-service-db-MASTER_PASSWORD~true, env:DB_PASSWORD}
    UI_PATH: ${ssm:/${self:custom.stage}-mat-service-ui-path, env:UI_PATH}
    ALLOWED_GROUPS: ${ssm:/${self:custom.stage}-${self:service}-allowed-groups, env:ALLOWED_GROUPS}

plugins:
  - serverless-dotenv-plugin
  - serverless-offline-ssm
  - serverless-offline
  - serverless-offline-scheduler

functions:
  web:
    name: ${self:service}-web-${self:custom.stage}
    handler: src/lambda.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
      - http: ANY /

  api:
    name: ${self:service}-api-${self:custom.stage}
    handler: src/lambda.handler
    events:
      - http:
          path: /api/{proxy+}
          method: ANY
          authorizer: ${self:custom.authorizer.authorizer}
    environment:
      CRM_API_URL: ${ssm:/${self:custom.stage}-${self:service}-crm-api-url, env:CRM_API_URL}
      CRM_CLOUD_AUTHORIZATION: ${ssm:/${self:custom.stage}-${self:service}-crm-cloud-authorization~true, env:CRM_CLOUD_AUTHORIZATION}
      CRM_CLOUD_URL: ${ssm:/${self:custom.stage}-${self:service}-crm-cloud-url, env:CRM_CLOUD_URL}
      DATABASE_URL: ${ssm:/${self:custom.stage}-${self:service}-database-url, env:DATABASE_URL}

  authorizer:
    handler: authorizer.handler
    environment:
      JWT_SECRET: ${ssm:/${self:custom.stage}-${self:service}-jwt-secret~true, env:JWT_SECRET}


  # createItvTasks:
  #   handler: src/lambda.createItvTasks
  #   # events:
  #   #   - schedule: rate(1 minute)
  #   environment:
  #     V1_MAT_API_URL: ${ssm:/${self:custom.stage}-${self:service}-v1-mat-api-url, env:V1_MAT_API_URL}
  #     V1_MAT_API_TOKEN: ${ssm:/${self:custom.stage}-${self:service}-v1-mat-api-token, env:V1_MAT_API_TOKEN}

resources:
  Resources:
    matServiceDbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Access to Postgres
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '5432'
            ToPort: '5432'
            CidrIp: 0.0.0.0/0
    matServiceDb:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        DBInstanceIdentifier: 'mat-service-db-${self:custom.stage}'
        DBName: ${self:provider.dbname}
        AllocatedStorage: 5
        DBInstanceClass: 'db.t2.micro'
        Engine: 'postgres'
        EngineVersion: '11.7'
        MasterUsername: ${self:provider.environment.DB_USER}
        MasterUserPassword: ${self:provider.environment.DB_PASSWORD}
        VPCSecurityGroups:
          - Fn::GetAtt:
              - matServiceDbSecurityGroup
              - GroupId
      DeletionPolicy: 'Snapshot'

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.aliases.${self:custom.stage}}
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certificate-arn.${self:custom.stage}}
            MinimumProtocolVersion: TLSv1.2_2018
            SslSupportMethod: sni-only
          DefaultCacheBehavior:
            TargetOriginId: ${self:service}-${self:custom.stage}-custom-origin
            ViewerProtocolPolicy: 'redirect-to-https'
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
          Enabled: true
          Origins:
            - Id: ${self:service}-${self:custom.stage}-custom-origin
              DomainName: ${self:custom.domain-name}
              OriginPath: /${self:custom.stage}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only

custom:
  stage: ${opt:stage, self:provider.stage}
  serverless-offline:
    noPrependStageInUrl: true
  serverless-offline-ssm:
    stages:
      - dev
  authorizer:
    authorizer:
      name: authorizer
      type: request
      identitySource: ''
      resultTtlInSeconds: 0
  domain-name:
    Fn::Join:
      - '.'
      - - Ref: ApiGatewayRestApi
        - execute-api
        - eu-west-2
        - amazonaws.com
  aliases:
    staging: staging.manageatenancy.hackney.gov.uk
    production: next.manageatenancy.hackney.gov.uk
  certificate-arn:
    staging: arn:aws:acm:us-east-1:492942404536:certificate/bcfcfca4-138d-4995-8a67-1aec6011bde4
    production: arn:aws:acm:us-east-1:492942404536:certificate/bcfcfca4-138d-4995-8a67-1aec6011bde4
