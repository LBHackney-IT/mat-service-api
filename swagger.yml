swagger: '2.0'
info:
  version: 0.1.0
  title: MaT Service
  description: Manage A Tenancy
# basePath: /mat/api/
schemes:
  - https
paths:
  '/areas':
    get:
      summary: List all areas
      responses:
        '200':
          description: Successful operation
  '/areas/{id}':
    parameters:
      - in: path
        name: id
        type: string
        description: The area id
        required: true
    get:
      summary: Retrieve an area
      responses:
        '200':
          description: Successful operation
  '/patches':
    get:
      summary: List all patches
      responses:
        '200':
          description: Successful operation
    post:
      summary: Create a new patch
      responses:
        '200':
          description: Successful operation
  '/patches/{id}':
    parameters:
      - in: path
        name: id
        type: string
        description: The patch id
        required: true
    get:
      summary: Retrieve a patch
      responses:
        '200':
          description: Successful operation
    put:
      summary: Update an existing patch
      responses:
        '200':
          description: Successful operation
    delete:
      summary: Delete an existing patch
      responses:
        '200':
          description: Successful operation
  '/healthcheck':
    get:
      summary: Retrieve service health status
      responses:
        '200':
          description: Successful operation
  '/scheduler':
    get:
      summary: List all scheduled tasks
      responses:
        '200':
          description: Successful operation
  '/scheduler/itv':
    post:
      summary: Launch a task to create ITV requests for new tenancies
      responses:
        '200':
          description: Successful operation
  '/tasks':
    get:
      summary: Get all tasks
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/tasklist'
        '401':
          description: Unauthenticated
          schema:
            $ref: '#/definitions/error'
        '500':
          description: There was an error processing your request.
          schema:
            $ref: '#/definitions/error'
    post:
      summary: Create a new task
      responses:
        '200':
          description: Successful operation
  '/tasks/{id}':
    parameters:
      - in: path
        name: id
        type: string
        description: The task id
        required: true
    get:
      summary: Retrieve an existing task
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/task'
        '401':
          description: Unauthenticated
          schema:
            $ref: '#/definitions/error'
        '500':
          description: There was an error processing your request.
          schema:
            $ref: '#/definitions/error'
    put:
      summary: Update an existing task
      responses:
        '200':
          description: Successful operation
  '/notes/{id}':
    parameters:
      - in: path
        name: id
        type: string
        description: The id of the task whose notes are required
        required: true
    get:
      summary: Retrieve all notes for a task
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/notelist'
        '401':
          description: Unauthenticated
          schema:
            $ref: '#/definitions/error'
        '500':
          description: There was an error processing your request.
          schema:
            $ref: '#/definitions/error'
  '/tras':
    get:
      summary: List all TRAs
      responses:
        '200':
          description: Successful operation
    post:
      summary: Create a new TRA
      responses:
        '200':
          description: Successful operation
  '/tras/{id}':
    parameters:
      - in: path
        name: id
        type: string
        description: The TRA id
        required: true
    get:
      summary: Retrieve an existing TRA
      responses:
        '200':
          description: Successful operation
    put:
      summary: Update an existing TRA
      responses:
        '200':
          description: Successful operation
    delete:
      summary: Delete an existing TRA
      responses:
        '200':
          description: Successful operation
  '/tras/{emailAddress}':
    parameters:
      - in: query
        name: emailAddress
        type: string
        description: The email address associated with the patch
        required: true
    get:
      summary: Retrieve all TRAs in a patch associated with the user with given email address
      responses:
        '200':
          description: Successful operation
        '400':
          description: emailAddress not provided
        '500':
          description: There was an error processing your request
  '/tras/{id}/meeting':
    parameters:
      - in: path
        name: id
        type: string
        description: The TRA id
        required: true
    get:
      summary: List all meetings for the specified TRA
      responses:
        '200':
          description: Successful operation
    post:
      summary: Create a new meeting for the specified TRA
      responses:
        '200':
          description: Successful operation
  '/tras/{tra-id}/meeting/{meeting-id}':
    parameters:
      - in: path
        name: tra-id
        type: string
        description: The TRA id
        required: true
      - in: path
        name: meeting-id
        type: string
        description: The meeting id
        required: true
    get:
      summary: Retrieve an existing TRA meeting
      responses:
        '200':
          description: Successful operation
    put:
      summary: Update an existing TRA meeting
      responses:
        '200':
          description: Successful operation
  '/tras/{tra-id}/meeting/{meeting-id}/issue':
    parameters:
      - in: path
        name: tra-id
        type: string
        description: The TRA id
        required: true
      - in: path
        name: meeting-id
        type: string
        description: The meeting id
        required: true
    get:
      summary: List all issues for the specified TRA meeting
      responses:
        '200':
          description: Successful operation
    post:
      summary: Create a new issue for the specified TRA meeting
      responses:
        '200':
          description: Successful operation
  '/tras/{tra-id}meeting/{meeting-id}/issue/{issue-id}':
    parameters:
      - in: path
        name: tra-id
        type: string
        description: The TRA id
        required: true
      - in: path
        name: meeting-id
        type: string
        description: The meeting id
        required: true
      - in: path
        name: issue-id
        type: string
        description: The issue id
        required: true
    get:
      summary: Retrieve an existing issue for the specified TRA meeting
      responses:
        '200':
          description: Successful operation
    put:
      summary: Update an existing issue foe the specified TRA meeting
      responses:
        '200':
          description: Successful operation

definitions:
  task:
    type: object
    required:
      - id
      - createdTime
      - category
      - type
      - resident
      - address
      - dueTime
      - stage
    description: 'A task relating to a resident and that requires action by LBH'
    properties:
      id:
        type: string
        format: uuid
        example: '5956eb7f-9edb-4e05-8934-8f2ee414cd81'
        description: 'The id for the task'
      createdTime:
        type: string
        format: iso8601
        example: '2007-03-01T13:00:00Z'
        description: 'The time at which the task was initially created'
      category:
        type: string
        example: 'Tenancy Audit And Visits'
        description: 'The category of task'
      type:
        type: string
        example: 'Tenancy & Household Check'
        description: 'The specific type of task'
      resident:
        $ref: '#/definitions/person'
      address:
        $ref: '#/definitions/address'
      dueTime:
        type: string
        format: iso8601
        example: '2007-03-01T13:00:00Z'
        description: 'The time at which the task is due to be completed'
      dueState:
        type: string
        format: enum [imminent, overdue]
        description: 'An optional flag indicating varying degrees of overdue state'
      completedTime:
        type: string
        format: iso8601
        example: '2007-03-01T13:00:00Z'
        description: 'The time at which the task was completed'
      stage:
        type: string
        format: enum [unstarted, started, validating, completed]
      children:
        type: array
        items:
          $ref: '#/definitions/task'
        description: 'Zero or more child tasks'
      parent:
        $ref: '#/definitions/task'
      referenceNumber:
        type: string
        description: ''
      tenancy:
        $ref: '#/definitions/tenancy'

  tasklist:
    type: array
    items:
      $ref: '#/definitions/task'
    description: 'A collection of tasks'

  note:
    type: object
    required:
      - text
      - createdBy
      - createdOn
      - incidentId
    properties:
      text:
        type: string
        example: 'Note body text for a task'
        description: 'The body text of the note'
      createdBy:
        type: string
        example: 'John Smith'
        description: 'The name of the user that created the note'
      createdOn:
        type: string
        example: '2020-09-21T12:00:00Z'
        description: 'The date and time that the note was created'
      incidentId:
        type: string
        example: '15ca9154-6fd1-ea21-a813-000d5a0ba110'
        description: 'The id of the linked incident for the note'

  notelist:
    type: array
    items:
      $ref: '#/definitions/note'
    description: 'A collection of notes'

  person:
    type: object
    required:
      - presentationName
      - role
      - dateOfBirth
    properties:
      presentationName:
        type: string
        example: 'Mr John Smith'
        description: "The value to use when presenting the person's full name"
      role:
        type: string
        format: enum [tenant]
        example: 'tenant'
        description: 'The role the person has in this task'
      dateOfBirth:
        type: string
        format: iso8601
        example: '2007-03-01'
        description: 'The date on which the person was born'
      mobileNumber:
        type: string
        example: '07707188934'
        description: "The person's mobile phone number"
      homePhoneNumber:
        type: string
        example: '0201234567'
        description: "The person's home phone number"
      workPhoneNumber:
        type: string
        example: '01301234567'
        description: "The person's work phone number"
      email:
        type: string
        example: 'johnDoe@email.com'
        description: "The person's email address"

  tenancy:
    type: object
    properties:
      type:
        type: string
        format: enum [secure]
        example: 'secure'
        description: ''
      startDate:
        type: string
        format: iso8601
        example: '2007-03-01'
        description: 'The date on which the tenancy started'
      residents:
        type: array
        items:
          $ref: '#/definitions/person'
        description: 'The residents occupying the tenancy'

  address:
    type: object
    properties:
      presentationShort:
        type: string
        example: 'Flat 9, Made Up Court, 7 Fake Road'
        description: 'A short, summarised representation of the address'

  error:
    type: object
    properties:
      status:
        type: integer
        example: '400'
        description: 'HTTP response code'
      message:
        type: string
        example: 'Mandatory parameter xxx was not provided'
